<%@page import="org.omg.CORBA.portable.ValueInputStream"%>
<%@page import="java.util.ArrayList"%>
<%@page import ="com.connection.ClsConnection"%>
<%@page import ="com.common.*"%>
<%@page import ="java.sql.*" %>
<%@page import="javax.sql.*" %>
<%@page import="java.util.Iterator" %>
<%@page import="java.util.ArrayList" %>
<%

	ClsCommon ClsCommon=new ClsCommon();
	int acno = request.getParameter("acno")==null?0:Integer.parseInt(request.getParameter("acno").trim());
	String upToDate = "26.04.2023";
	String atype = "AR"; 

	String sqltran="",aptran="";
	if(atype.equalsIgnoreCase("AR")){
		sqltran=" and dramount-out_amount < 0 ";
		aptran=" and dramount-out_amount > 0 ";
	}else{
		sqltran=" and dramount-out_amount > 0 ";
		aptran=" and dramount-out_amount < 0 ";
	}
	Date sqlUpToDate=null;
	if(!(upToDate.equalsIgnoreCase("undefined")) && !(upToDate.equalsIgnoreCase("")) && !(upToDate.equalsIgnoreCase("0"))){
		sqlUpToDate = ClsCommon.changeStringtoSqlDate(upToDate);
	 }
 	Connection conn=null,connms=null;

	try{
		ClsConnection objconn= new ClsConnection();
		conn=objconn.getMyConnection();
		conn.setAutoCommit(false);

 		int[] acno1={32291 , 32293 , 32301 , 32305 , 32309 , 32315 , 32316 , 32317 , 32323 , 32325 , 32329 , 32332 , 32333 , 32338 , 32342 , 32348 , 32350 , 32351 , 32355 , 32356 , 32357 , 32364 , 32365 , 32369 , 32377 , 32389 , 32390 , 32397 , 32405 , 32414 , 32420 , 32425 , 32430 , 32431 , 32432 , 32434 , 32436 , 32437 , 32440 , 32445 , 32457 , 32466 , 32468 , 32471 , 32474 , 32476 , 32483 , 32488 , 32491 , 32496 , 32499 , 32500 , 32503 , 32512 , 32518 , 32536 , 32554 , 32558 , 32568 , 32571 , 32578 , 32585 , 32636 , 32637 , 32654 , 32683 , 32690 , 32699 , 32711 , 32712 , 32719 , 32721 , 32731 , 32738 , 32745 , 32774 , 32775 , 32777 , 32782 , 32784 , 32800 , 32818 , 32828 , 32837 , 32876 , 32880 , 32888 , 32909 , 32912 , 32919 , 32920 , 32941 , 32964 , 32973 , 32974 , 32985 , 33000 , 33002 , 33012 , 33014 , 33022 , 33035 , 33041 , 33047 , 33085 , 33096 , 33113 , 33118 , 33124 , 33127 , 33128 , 33130 , 33135 , 33136 , 33143 , 33157 , 33200 , 33213 , 33217 , 33219 , 33221 , 33223 , 33236 , 33246 , 33266 , 33269 , 33275 , 33281 , 33285 , 33290 , 33291 , 33296 , 33320 , 33345 , 33359 , 33366 , 33395 , 33409 , 33430 , 33439 , 33441 , 33483 , 33493 , 33561 , 33581 , 33607 , 33609 , 33619 , 33620 , 33651 , 33656 , 33667 , 33681 , 33682 , 33702 , 33707 , 33718 , 33730 , 33740 , 33743 , 33765 , 33770 , 33776 , 33779 , 33781 , 33789 , 33799 , 33800 , 33807 , 33812 , 33816 , 33824 , 33844 , 33862 , 33864 , 33869 , 33870 , 33880 , 33888 , 33889 , 33908 , 33909 , 33911 , 33924 , 33925 , 33933 , 33935 , 33941 , 33960 , 33961 , 33963 , 33968 , 33976 , 33984 , 33985 , 33990 , 33995 , 34021 , 34025 , 34034 , 34040 , 34049 , 34052 , 34057 , 34075 , 34083 , 34084 , 34085 , 34086 , 34087 , 34108 , 34109 , 34111 , 34125 , 34126 , 34140 , 34145 , 34151 , 34158 , 34164 , 34167 , 34178 , 34182 , 34199 , 34203 , 34204 , 34215 , 34221 , 34226 , 34230 , 34236 , 34240 , 34244 , 34248 , 34253 , 34262 , 34265 , 34273 , 34279 , 34284 , 34285 , 34290 , 34295 , 34305 , 34309 , 34314 , 34315 , 34317 , 34327 , 34328 , 34334 , 34337 , 34341 , 34345 , 34354 , 34355 , 34368 , 34382 , 34385 , 34403 , 34414 , 34417 , 34419 , 34425 , 34444 , 34452 , 34453 , 34464 , 34466 , 34475 , 34486 , 34498 , 34532 , 34554 , 34560 , 34562 , 34563 , 34571 , 34576 , 34591 , 34602 , 34609 , 34623 , 34629 , 34632 , 34640 , 34655 , 34681 , 34684 , 34686 , 34734 , 34783 , 34799 , 34808 , 34844 , 34858 , 34861 , 34865 , 34871 , 34916 , 34931 , 34932 , 34934 , 34935 , 34936 , 34937 , 34938 , 34939 , 34994 , 35088 , 35089 , 35091 , 35115 , 35136 , 35147 , 35169 , 35173 , 35194 , 35195 , 35203 , 35207 , 35208 , 35209 , 35210 , 35211 , 35212 , 35215 , 35218 , 35219 , 35220 , 35221 , 35222 , 35223 , 35224 , 35227 , 35228 , 35229 , 35230 , 35231 , 35232 , 35233 , 35234 , 35235 , 35236 , 35237 , 35238 , 35240 , 35242 , 35243 , 35245 , 35248 , 35249 , 35250 , 35251 , 35255 , 35256 , 35257 , 35258 , 35260 , 35261 , 35262 , 35264 , 35265 , 35266 , 35267 , 35269 , 35271 , 35272 , 35273 , 35274 , 35275 , 35276 , 35277 , 35278 , 35279 , 35280 , 35281 , 35283 , 35284 , 35285 , 35287 , 35288 , 35289 , 35291 , 35293 , 35294 , 35295 , 35296 , 35297 , 35298 , 35300 , 35301 , 35302 , 35303 , 35304 , 35305 , 35307 , 35308 , 35309 , 35310 , 35311 , 35312 , 35313 , 35315 , 35316 , 35317 , 35318 , 35319 , 35320 , 35322 , 35323 , 35324 , 35325 , 35326 , 35327 , 35328 , 35329 , 35330 , 35331 , 35332 , 35333 , 35334 , 35335 , 35336 , 35337 , 35338 , 35339 , 35340 , 35341 , 35342 , 35343 , 35344 , 35345 , 35346 , 35347 , 35348 , 35350 , 35351 , 35352 , 35354 , 35355 , 35356 , 35358 , 35359 , 35360 , 35362 , 35363 , 35364 , 35365 , 35368 , 35369 , 35370 , 35371 , 35373 , 35374 , 35375 , 35376 , 35377 , 35378 , 35380 , 35381 , 35383 , 35384 , 35385 , 35389 , 35390 , 35391 , 35392 , 35393 , 35394 , 35395 , 35396 , 35397 , 35398 , 35400 , 35402 , 35406 , 35407 , 35408 , 35410 , 35411 , 35412 , 35415 , 35416 , 35417 , 35418 , 35419 , 35421 , 35422 , 35423 , 35425 , 35427 , 35428 , 35429 , 35430 , 35431 , 35432 , 35433 , 35435 , 35436 , 35438 , 35441 , 35442 , 35443 , 35446 , 35447 , 35451 , 35452 , 35453 , 35455 , 35456 , 35462 , 35463 , 35464 , 35465 , 35466 , 35467 , 35468 , 35469 , 35470 , 35471 , 35472 , 35473 , 35474 , 35475 , 35476 , 35477 , 35478 , 35479 , 35480 , 35481 , 35482 , 35485 , 35487 , 35488 , 35489 , 35490 , 35491 , 35492 , 35493 , 35494 , 35495 , 35496 , 35497 , 35499 , 35500 , 35501 , 35502 , 35503 , 35505 , 35506 , 35509 , 35510 , 35511 , 35514 , 35515 , 35516 , 35517 , 35518 , 35519 , 35520 , 35521 , 35522 , 35523 , 35524 , 35525 , 35526 , 35527 , 35528 , 35529 , 35530 , 35531 , 35532 , 35533 , 35534 , 35535 , 35538 , 35540 , 35541 , 35544 , 35545 , 35546 , 35547 , 35548 , 35549 , 35550 , 35552 , 35553 , 35555 , 35556 , 35558 , 35559 , 35560 , 35561 , 35564 , 35565 , 35566 , 35567 , 35572 , 35573 , 35575 , 35576 , 35577 , 35578 , 35579 , 35580 , 35581 , 35582 , 35583 , 35584 , 35586 , 35589 , 35590 , 35593 , 35598 , 35599 , 35600 , 35602 , 35604 , 35606 , 35607 , 35608 , 35609 , 35610 , 35613 , 35614 , 35616 , 35617 , 35618 , 35619 , 35623 , 35625 , 35626 , 35627 , 35628 , 35629 , 35630 , 35631 , 35633 , 35634 , 35636 , 35639 , 35640 , 35643 , 35644 , 35645 , 35647 , 35648 , 35649 , 35650 , 35651 , 35652 , 35653 , 35654 , 35655 , 35656 , 35658 , 35659 , 35660 , 35661 , 35662 , 35663 , 35664 , 35666 , 35667 , 35668 , 35669 , 35670 , 35671 , 35672 , 35673 , 35674 , 35675 , 35676 , 35678 , 35679 , 35680 , 35682 , 35683 , 35684 , 35686 , 35687 , 35688 , 35689 , 35691 , 35692 , 35693 , 35694 , 35695 , 35696 , 35697 , 35698 , 35699 , 35700 , 35702 , 35703 , 35704 , 35705 , 35707 , 35709 , 35710 , 35712 , 35713 , 35714 , 35715 , 35717 , 35718 , 35719 , 35720 , 35721 , 35722 , 35723 , 35724 , 35725 , 35726 , 35727 , 35728 , 35729 , 35730 , 35731 , 35732 , 35733 , 35734 , 35736 , 35737 , 35739 , 35740 , 35742 , 35743 , 35746 , 35748 , 35749 , 35750 , 35751 , 35752 , 35753 , 35754 , 35755 , 35756 , 35757 , 35760 , 35761 , 35762 , 35764 , 35766 , 35767 , 35768 , 35769 , 35770 , 35772 , 35776 , 35777 , 35778 , 35779 , 35780 , 35781 , 35782 , 35783 , 35784 , 35785 , 35786 , 35787 , 35788 , 35789 , 35790 , 35792 , 35793 , 35794 , 35795 , 35796 , 35797 , 35798 , 35799 , 35800 , 35801 , 35803 , 35804 , 35805 , 35806 , 35807 , 35808 , 35809 , 35810 , 35811 , 35812 , 35813 , 35814 , 35817 , 35818 , 35819 , 35820 , 35821 , 35822 , 35824 , 35825 , 35827 , 35828 , 35829 , 35830 , 35833 , 35835 , 35836 , 35837 , 35838 , 35839 , 35840 , 35841 , 35842 , 35843 , 35844 , 35845 , 35846 , 35847 , 35848 , 35849 , 35850 , 35851 , 35852 , 35853 , 35854 , 35856 , 35857 , 35858 , 35860 , 35861 , 35862 , 35863 , 35864 , 35865 , 35867 , 35868 , 35870 , 35871 , 35872 , 35874 , 35875 , 35876 , 35878 , 35879 , 35882 , 35883 , 35884 , 35886 , 35888 , 35889 , 35890 , 35891 , 35892 , 35893 , 35899 , 35900 , 35903 , 35904 , 35909 , 35910 , 35912 , 35914 , 35916 , 35920 , 35921 , 35923 , 35924 , 35925 , 35926 , 35927 , 35928 , 35932 , 35933 , 35934 , 35935 , 35937 , 35942 , 35944 , 35946 , 35949 , 35951 , 35952 , 35954 , 35955 , 35956 , 35957 , 35961 , 35962 , 35964 , 35965 , 35966 , 35967 , 35969 , 35970 , 35972 , 35973 , 35974 , 35978 , 35979 , 35981 , 35982 , 35983 , 35989 , 35990 , 35991 , 35992 , 35993 , 35994 , 35996 , 35997 , 35998 , 35999 , 36000 , 36001 , 36002 , 36003 , 36004 , 36005 , 36006 , 36007 , 36008 , 36009 , 36010 , 36011 , 36012 , 36013 , 36014 , 36015 , 36016 , 36017 , 36018 , 36019 , 36020 , 36021 , 36022 , 36023 , 36024 , 36025 , 36026 , 36027 , 36028 , 36029 , 36031 , 36032 , 36033 , 36034 , 36035 , 36037 , 36039 , 36040 , 36045 , 36046 , 36048 , 36049 , 36050 , 36052 , 36056 , 36059 , 36061 , 36062 , 36063 , 36064 , 36065 , 36073 , 36074 , 36075 , 36076 , 36077 , 36078 , 36079 , 36081 , 36083 , 36084 , 36085 , 36086 , 36087 , 36089 , 36090 , 36091 , 36093 , 36094 , 36095 , 36096 , 36097 , 36099 , 36100 , 36101 , 36102 , 36104 , 36105 , 36106 , 36108 , 36109 , 36110 , 36111 , 36115 , 36116 , 36117 , 36118 , 36119 , 36122 , 36125 , 36126 , 36127 , 36128 , 36129 , 36130 , 36132 , 36134 , 36135 , 36137 , 36138 , 36139 , 36140 , 36141 , 36144 , 36145 , 36146 , 36147 , 36148 , 36149 , 36150 , 36152 , 36153 , 36154 , 36157 , 36159 , 36160 , 36161 , 36162 , 36164 , 36166 , 36167 , 36172 , 36174 , 36178 , 36179 , 36182 , 36183 , 36185 , 36194 , 36198 , 36199 , 36201 , 36203 , 36206 , 36207 , 36211 , 36216 , 36220 , 36243 , 36252 , 36253 , 36255 , 36259 , 36260 , 36267 , 36279 , 36287 , 36292 , 36293 , 36310 , 36311 , 36317 , 36321 , 36323 , 36337 , 36338 , 36340 , 36366 , 36369 , 36392 , 36393 , 36399 , 36421 , 36443 , 36448 , 36458 , 36465 , 36483 , 36486 , 36488 , 36493 , 36495 , 36498 , 36504 , 36510 , 36515 , 36516 , 36521 , 36524 , 36525 , 36526 , 36527 , 36529 , 36530 , 36547 , 36550 , 36554 , 36569 , 36575 , 36576 , 36582 , 36587 , 36592 , 36597 , 36602 , 36611 , 36613 , 36614 , 36615 , 36616 , 36623 , 36626 , 36682 , 36684 , 36732 , 36737 , 36767 , 36831 , 36846 , 36857 , 36861 , 36890 , 36988 , 37108 , 37135 , 37161 , 37180 , 37185 , 37277 , 37279 , 37475 , 37525 , 37557 , 37583 , 37605 , 37611 , 37635 , 37718 , 37720 , 37731 , 37795 , 37914 , 37933 , 37958 , 37959 , 38104 , 38121 , 38122 , 38133 , 38142 , 38212 , 38215 , 38245 , 38295 , 38298 , 38387 , 38410 , 38413 , 38433 , 38455 , 38462 , 38477 , 38478 , 38479 , 38480 , 38481 , 38482 , 38483 , 38484 , 38485 , 38486 , 38488 , 38492 , 38493 , 38496 , 38497 , 38499 , 38502 , 38505 , 38516 , 38517 , 38520 , 38526 , 38531 , 38532 , 38538 , 38554 , 38562 , 38578 , 38581 , 38591 , 38611 , 38636 , 38640 , 38651 , 38660 , 38668 , 38674 , 38675 , 38677 , 38681 , 38684 , 38689 , 38691 , 38692 , 38695 , 38696 , 38700 , 38710 , 38713 , 38730 , 38733 , 38742 , 38746 , 38747 , 38749 , 38752 , 38761 , 38763 , 38766 , 38767 , 38772 , 38778 , 38784 , 38788 , 38803 , 38804 , 38805 , 38806 , 38820 , 38832 , 38872 , 38876 , 38881 , 38897 , 38923 , 38928 , 38931 , 38949 , 38969 , 38971 , 38984 , 38992 , 38995 , 39033 , 39034 , 39061 , 39063 , 39100 , 39103 , 39108 , 39153 , 39164 , 39371 , 39381 , 39528 , 39548 , 39579 , 39627 , 39662 , 39673 , 39727 , 39743 , 39779 , 39787 , 39825 , 39837 , 39918 , 39950 , 39977 , 39998 , 40006 , 40024 , 40027 , 40028 , 40057 , 40077 , 40117 , 40119 , 40120 , 40125 , 40130 , 40136 , 40148 , 40167 , 40173 , 40177 , 40220 , 40224 , 40225 , 40235 , 40289 , 40292 , 40331 , 40341 , 40355 , 40364 , 40365 , 40392 , 40437 , 40447 , 40455 , 40472 , 40504 , 40509 , 40517 , 40520 , 40525 , 40538 , 40554 , 40609 , 40631 , 40640 , 40646 , 40656 , 40681 , 40716 , 40799 , 40818 , 40849 , 40851 , 40867 , 40908 , 40922 , 41172 , 41189 , 41227 , 41992 , 42011 , 42107 , 42123 , 42152 , 42158 , 42220 , 42252 , 42333 , 42370 , 43053 , 43160 , 43221 , 43467 , 43500 , 43505 , 43509 , 43510 , 43536 , 43546 , 43594 , 43617 , 43619 , 43631 , 43662 , 43718 , 43753 , 43783 , 43795 , 43972 , 43985 , 44021 , 44039 , 44076 , 44148 , 44164 , 44202 , 44203 , 44236 , 44269 , 44300 , 44353 , 44354 , 44355 , 44358 , 44366 , 44367 , 44368 , 44370 , 44371 , 44373 , 44383 , 44388 , 44389 , 44393 , 44398 , 44400 , 44406 , 44408 , 44412 , 44415 , 44416 , 44421 , 44422 , 44424 , 44425 , 44430 , 44438 , 44439 , 44441 , 44445 , 44447 , 44449 , 44451 , 44453 , 44454 , 44455 , 44458 , 44459 , 44465 , 44468 , 44478 , 44486 , 44487 , 44488 , 44490 , 44491 , 44497 , 44500 , 44501 , 44502 , 44503 , 44508 , 44513 , 44525 , 44537 , 44540 , 44549 , 44553 , 44554 , 44555 , 44558 , 44559 , 44560 , 44562 , 44565 , 44567 , 44574 , 44575 , 44576 , 44578 , 44580 , 44589 , 44594 , 44604 , 44608 , 44610 , 44612 , 44613 , 44614 , 44620 , 44625 , 44627 , 44628 , 44631 , 44632 , 44642 , 44644 , 44647 , 44649 , 44654 , 44655 , 44660 , 44663 , 44666 , 44667 , 44677 , 44679 , 44680 , 44684 , 44688 , 44689 , 44690 , 44691 , 44692 , 44699 , 44701 , 44702 , 44705 , 44707 , 44709 , 44710 , 44712 , 44713 , 44715 , 44716 , 44720 , 44722 , 44728 , 44730 , 44731 , 44732 , 44737 , 44738 , 44739 , 44741 , 44742 , 44743 , 44749 , 44752 , 44756 , 44760 , 44761 , 44762 , 44764 , 44768 , 44769 , 44770 , 44772 , 44773 , 44775 , 44776 , 44778 , 44784 , 44785 , 44788 , 44790 , 44791 , 44796 , 44799 , 44800 , 44802 , 44803 , 44805 , 44808 , 44809 , 44812 , 44816 , 44826 , 44830 , 44833 , 44839 , 44840 , 44850 , 44853 , 44861 , 44862 , 44868 , 44869 , 44870 , 44872 , 44874 , 44878 , 44879 , 44880 , 44887 , 44889 , 44890 , 44893 , 44896 , 44899 , 44905 , 44910 , 44911 , 44913 , 44915 , 44920 , 44923 , 44928 , 44929 , 44930 , 44933 , 44934 , 44936 , 44938 , 44945 , 44950 , 44954 , 44955 , 44957 , 44958 , 44959 , 44960 , 44966 , 44968 , 44971 , 44972 , 44973 , 44975 , 44977 , 44978 , 44980 , 44987 , 44988 , 44989 , 44990 , 44991 , 44995 , 44998 , 45000 , 45002 , 45003 , 45005 , 45015 , 45021 , 45022 , 45025 , 45026 , 45030 , 45033 , 45037 , 45042 , 45045 , 45050 , 45058 , 45059 , 45060 , 45061 , 45062 , 45069 , 45070 , 45073 , 45078 , 45082 , 45086 , 45091 , 45095 , 45097 , 45098 , 45102 , 45104 , 45107 , 45108 , 45112 , 45113 , 45116 , 45117 , 45118 , 45121 , 45123 , 45127 , 45129 , 45130 , 45131 , 45133 , 45138 , 45143 , 45145 , 45148 , 45158 , 45162 , 45163 , 45172 , 45177 , 45181 , 45184 , 45185 , 45186 , 45188 , 45195 , 45197 , 45198 , 45204 , 45207 , 45221 , 45233 , 45271 , 45382 , 45383 , 45384 , 45385 , 45565 , 45756 , 45792 , 45872 , 45898 , 46032 , 46092 , 46141 , 46220 , 46362 , 46761 , 46863 , 46936 , 47499 , 47956 , 47984 , 48229 , 48240 , 48901 , 49024 , 49161 , 49527 , 49575 , 49663 , 50003 , 50277 , 50278 , 50279 , 50280 , 50465 , 50474 , 50477 , 50479 , 50482 , 50483 , 50484 , 50485 , 50486 , 50493 , 50495 , 50498 , 50526 , 50529 , 50531 , 50532 , 50534 , 50542 , 50543 , 50552 , 50556 , 50558 , 50560 , 50561 , 50565 , 50569 , 50586 , 50597 , 50605 , 50609 , 50611 , 50618 , 50619 , 50630 , 50632 , 50637 , 50640 , 50644 , 50647 , 50653 , 50654 , 50656 , 50660 , 50661 , 50671 , 50682 , 50687 , 50689 , 50692 , 50696 , 50699 , 50701 , 50704 , 50710 , 50720 , 50722 , 50727 , 50735 , 50738 , 50741 , 50748 , 50752 , 50754 , 50759 , 50763 , 50769 , 50773 , 50806 , 50809 , 50819 , 50824 , 50829 , 50830 , 50834 , 50838 , 50841 , 50861 , 50862 , 50864 , 50878 , 50880 , 50890 , 50891 , 50896 , 50900 , 50902 , 50903 , 50912 , 50931 , 50932 , 50936 , 50960 , 51019 , 51077 };
		for(int i=0;i<acno1.length;i++){
			acno=acno1[i];
 		
 
		ArrayList<String> altranid= new ArrayList<String>();
		ArrayList<String> alaptrid= new ArrayList<String>();
		int aptrid=0,tranid=0;
		// ,acno=10569;
		double tranamt=0.0,aptranamt=0.0,apoutamt=0.0,upamt=0.0;
		String updateString="",insString="";
		Statement stmtaptran=null,stmtupd=null,stmtins=null;
		ResultSet rsaptran =null;
		String sqlselect="select tranid,(dramount-out_amount)*id amt from my_jvtran where status=3 and acno="+acno+" "+sqltran+" and date<='"+sqlUpToDate+"'";
		System.out.println("values 1======"+sqlselect);
		Statement stmtrecpt= conn.createStatement();
		ResultSet rsselect = stmtrecpt.executeQuery(sqlselect);
		while(rsselect.next()){
			upamt=0.0;
				// altranid.add(rsselect.getString("tranid")+"::"+rsselect.getString("amt"));
				tranid=rsselect.getInt("tranid");
				tranamt=rsselect.getDouble("amt");
		
				String sqlaptran=" select tranid,(dramount-out_amount)*id amt  from my_jvtran where status=3 and acno="+acno+" "+aptran+" and date<='"+sqlUpToDate+"'" ;
				System.out.println("values 2====== "+sqlaptran);
				stmtaptran = conn.createStatement();
				rsaptran = stmtaptran.executeQuery(sqlaptran);
				while(rsaptran.next()){
					aptrid=rsaptran.getInt("tranid");
					aptranamt=rsaptran.getDouble("amt");
					System.out.println("values 4====== "+tranamt+"===="+aptranamt);
					if(aptranamt>tranamt){
						upamt=tranamt;	
					}
					else{  upamt=aptranamt; }
					updateString="update my_jvtran set out_amount=(out_amount*id+"+upamt+")* id  where tranid  in ("+aptrid+","+tranid+")";
					System.out.println("values 3====== "+updateString);
					stmtupd=conn.createStatement();
					stmtupd.execute(updateString);
					upamt=upamt<0.0?upamt*-1:upamt;
					insString=" insert into my_outd(TRANID, AMOUNT, AP_TRID) values ("+tranid+","+upamt+","+aptrid+" )" ;
					System.out.println("values 4====== "+insString);
					stmtins=conn.createStatement();
					stmtins.execute(insString);
					tranamt=ClsCommon.Round(tranamt-upamt,2);
					System.out.println("values 4====== "+tranamt);
					if(tranamt==0){
							System.out.println("==== break === ");
							break;
						}
				}
		}
		 conn.commit();
		}
		// conn.commit();
		response.getWriter().write("S");
	}
	catch(Exception e){
		response.getWriter().write("E");
		e.printStackTrace();	
	}
	finally{
		conn.close();
	}
	
%>